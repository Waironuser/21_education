#include "s21_decimal.h"
#include "sobektof_lib/s21_decimal_get_set_info_bits.h"

// #test s21_mul_test_002
// Test mull a more_28_power numbers
// s21_decimal value1 = {{123, 0, 0, 0x00220000}}; // 0.00000000000000000000000000123
// s21_decimal value2 = {{321, 0, 0, 0x00000000}}; // 321
// s21_decimal result = {{0, 0, 0, 0}};
// s21_decimal expected = {{0, 0, 0, 0x001C0000}}; // 0.00000000000000000000000039483 ~ 0
// int status = s21_mul(value1, value2, &result);
// ck_assert_int_eq(status, 0);
// ck_assert_int_eq(result.bits[0], expected.bits[0]);
// ck_assert_int_eq(result.bits[1], expected.bits[1]);
// ck_assert_int_eq(result.bits[2], expected.bits[2]);
// ck_assert_int_eq(result.bits[3], expected.bits[3]);

// #test s21_mul_test_003
// Test mull a more_28_power numbers, but with rounding up
// s21_decimal value1 = {{223, 0, 0, 0x00210000}}; // 223*10^-33
// s21_decimal value2 = {{321, 0, 0, 0x00000000}}; // 321
// s21_decimal result = {{0, 0, 0, 0}};
// s21_decimal expected = {{1, 0, 0, 0x001C0000}}; // 0.000000000000000000000000000071583 ~ 1*10^-28
// int status = s21_mul(value1, value2, &result);
// ck_assert_int_eq(status, 0);
// ck_assert_int_eq(result.bits[0], expected.bits[0]);
// ck_assert_int_eq(result.bits[1], expected.bits[1]);
// ck_assert_int_eq(result.bits[2], expected.bits[2]);
// ck_assert_int_eq(result.bits[3], expected.bits[3]);

#test s21_mul_test_004
// Multiplying really big nums
s21_decimal value1 = {{0x288F4CB7, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}};
s21_decimal value2 = {{0x288F4CB7, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}};
s21_decimal result = {{0, 0, 0, 0}};
int status = s21_mul(value1, value2, &result);
ck_assert_int_eq(status, 1);

#test s21_mul_test_005
// Multiplying really negative nums
s21_decimal value1 = {{0x288F4CB7, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}}; // 68047992.7
s21_decimal value2 = {{0x288F4CB7, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // 680479927
s21_decimal result = {{0, 0, 0, 0}};
int status = s21_mul(value1, value2, &result);
ck_assert_int_eq(status, 2);

#test s21_from_float_to_decimal_test_005
// Null decimal error
float value1 = 5;
s21_decimal *value2 = NULL;
int status = s21_from_float_to_decimal(value1, value2);
ck_assert_int_eq(status, 1);

#test s21_from_float_to_decimal_test_006
// To small float
float value1 = 0.00000000000000000000000000000001f;
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{0, 0, 0, 0}}; // return 0 if a float is too small
int status = s21_from_float_to_decimal(value1, &result);
ck_assert_int_eq(status, 1);
ck_assert_int_eq(result.bits[0], expected.bits[0]);
ck_assert_int_eq(result.bits[1], expected.bits[1]);
ck_assert_int_eq(result.bits[2], expected.bits[2]);
ck_assert_int_eq(result.bits[3], expected.bits[3]);

#test s21_from_float_to_decimal_test_007
// To big float
float value1 = 79228162514264337593543950330000.0f;
s21_decimal result = {{0, 0, 0, 0}};
int status = s21_from_float_to_decimal(value1, &result);
ck_assert_int_eq(status, 1);

#test s21_from_float_to_decimal_test_008
// Big enough float to get only first 7 digits
float value1 = 7922816251426433759354.0f;
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{0x78E480, 0, 0, 0}}; // Only first 7 digits
int status = s21_from_float_to_decimal(value1, &result);
ck_assert_int_eq(status, 0);
ck_assert_int_eq(result.bits[0], expected.bits[0]);
ck_assert_int_eq(result.bits[1], expected.bits[1]);
ck_assert_int_eq(result.bits[2], expected.bits[2]);
ck_assert_int_eq(result.bits[3], expected.bits[3]);

#test s21_from_float_to_decimal_test_009
// To big negative float
float value1 = -79228162514264337593543950330000.0f;
s21_decimal result = {{0, 0, 0, 0}};
int status = s21_from_float_to_decimal(value1, &result);
ck_assert_int_eq(status, 1);

#test s21_from_float_to_decimal_test_010
// Big enough negative float to get only first 7 digits
float value1 = -7922816251426433759354.0f;
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{0x78E480, 0, 0, 0x80000000}}; // Only first 7 digits
int status = s21_from_float_to_decimal(value1, &result);
ck_assert_int_eq(status, 0);
ck_assert_int_eq(result.bits[0], expected.bits[0]);
ck_assert_int_eq(result.bits[1], expected.bits[1]);
ck_assert_int_eq(result.bits[2], expected.bits[2]);
ck_assert_int_eq(result.bits[3], expected.bits[3]);

// #test s21_div_test_001
// Big nums with proper rounding
// s21_decimal value1 = {{0xCC2931EC, 0x146AF4D0, 0xB140861F, 0}};
// s21_decimal value2 = {{0x7E21A5E2, 0x0DD40C6C, 0x81A6A409, 0}};
// s21_decimal result = {{0, 0, 0, 0}};
// s21_decimal expected = {{0xCD388D49, 0x27E0666A, 0x2C2CC8DE, 0x001C0000}}; // 0.00000000000000000000000000071583 ~ 1*10^-28
// int status = s21_div(value1, value2, &result);
// ck_assert_int_eq(status, 0);
// ck_assert_int_eq(result.bits[0], expected.bits[0]);
// ck_assert_int_eq(result.bits[1], expected.bits[1]);
// ck_assert_int_eq(result.bits[2], expected.bits[2]);
// ck_assert_int_eq(result.bits[3], expected.bits[3]);

#test s21_div_test_002
// Error = 3 - divisor is zero 
s21_decimal value1 = {{0xCC2931EC, 0x146AF4D0, 0xB140861F, 0}};
s21_decimal value2 = {{0, 0, 0, 0}};
s21_decimal result = {{0, 0, 0, 0}};
int status = s21_div(value1, value2, &result);
ck_assert_int_eq(status, 3);

#test s21_div_test_003
// Really big decimal as a result
s21_decimal value1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
s21_decimal value2 = {{0x1, 0, 0, 0x001C0000}};
s21_decimal result = {{0, 0, 0, 0}};
int status = s21_div(value1, value2, &result);
ck_assert_int_eq(status, 1);

#test s21_div_test_004
// Really big negative decimal as a result
s21_decimal value1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}};
s21_decimal value2 = {{0x1, 0, 0, 0x001C0000}};
s21_decimal result = {{0, 0, 0, 0}};
int status = s21_div(value1, value2, &result);
ck_assert_int_eq(status, 2);

#test s21_div_test_005
// Really small num ( definetly zero in 29 digits ) as a result
s21_decimal value1 = {{0x1, 0, 0, 0x001C0000}};
s21_decimal value2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
s21_decimal result = {{0, 0, 0, 0}};
s21_decimal expected = {{0, 0, 0, 0}};
int status = s21_div(value1, value2, &result);
ck_assert_int_eq(status, 0);
ck_assert_int_eq(result.bits[0], expected.bits[0]);
ck_assert_int_eq(result.bits[1], expected.bits[1]);
ck_assert_int_eq(result.bits[2], expected.bits[2]);
ck_assert_int_eq(result.bits[3], expected.bits[3]);